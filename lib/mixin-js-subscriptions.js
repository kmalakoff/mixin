/*
  mixin-js-subscriptions.js 0.1.5
  (c) 2011, 2012 Kevin Malakoff - http://kmalakoff.github.com/mixin/
  License: MIT (http://www.opensource.org/licenses/mit-license.php)
  Dependencies: Mixin.Core
*/
(function() {
  return (function(factory) {
    // AMD
    if (typeof define === 'function' && define.amd) {
      return define('mixin-js-subscriptions', ['mixin-js'], factory);
    }
    // CommonJS/NodeJS or No Loader
    else {
      return factory.call(this);
    }
  })(function() {// Generated by CoffeeScript 1.6.3
var Mixin, _;

Mixin = !window.Mixin && (typeof require !== 'undefined') ? require('mixin-js') : window.Mixin;

_ = Mixin._;

/*
  mixin-js-subscriptions.js 0.1.5
  (c) 2011, 2012 Kevin Malakoff - http://kmalakoff.github.com/mixin/
  License: MIT (http://www.opensource.org/licenses/mit-license.php)
  Dependencies: Mixin.Core
*/


Mixin.Subscriptions || (Mixin.Subscriptions = {});

Mixin.Subscriptions._SubscriptionLink = (function() {
  function _SubscriptionLink(subscription, subscriber, notification_callback, options) {
    var subscriber_instance_data;
    this.subscription = subscription;
    this.subscriber = subscriber;
    this.notification_callback = notification_callback;
    this.options = _.clone(options || {});
    subscriber_instance_data = Mixin.instanceData(this.subscriber, 'Subscriber');
    subscriber_instance_data.subscription_backlinks.push(this);
  }

  _SubscriptionLink.prototype.mustKeepUntilDestroyed = function() {
    return (this.options.keep_until_destroyed === void 0) || !this.options.keep_until_destroyed;
  };

  _SubscriptionLink.prototype.destroy = function() {
    var subscriber_instance_data;
    if (!this.subscription) {
      throw new Error("Mixin.Subscriptions: _SubscriptionLink destroyed multiple times");
    }
    if (this.options.destroy) {
      this.options.destroy();
      this.options.destroy = null;
    }
    subscriber_instance_data = Mixin.instanceData(this.subscriber, 'Subscriber');
    _.remove(subscriber_instance_data.subscription_backlinks, this);
    _.remove(this.subscription.subscription_links, this);
    this.subscription = null;
    this.subscriber = null;
    this.notification_callback = null;
    return this.options = null;
  };

  return _SubscriptionLink;

})();

Mixin.Subscription || (Mixin.Subscription = {});

Mixin.Subscription.TYPE = {};

Mixin.Subscription.TYPE.MULTIPLE = 0;

Mixin.Subscription.TYPE.EXCLUSIVE = 1;

Mixin.Subscriptions._Subscription = (function() {
  function _Subscription(observable, subscription_type) {
    this.observable = observable;
    this.subscription_type = subscription_type;
    if (Mixin.DEBUG) {
      if ((typeof this.subscription_type !== 'number') || (this.subscription_type < Mixin.Subscription.TYPE.MULTIPLE) || (this.subscription_type > Mixin.Subscription.TYPE.EXCLUSIVE)) {
        throw new Error("Mixin.Subscriptions: Mixin.Subscription.TYPE is invalid");
      }
    }
    this.subscription_links = [];
  }

  _Subscription.prototype.addSubscriber = function(subscriber, notification_callback, options) {
    if (this.subscription_type === Mixin.Subscription.TYPE.EXCLUSIVE) {
      this.removeSubscribers(function(test_subscription) {
        return test_subscription.mustKeepUntilDestroyed();
      });
    }
    return this.subscription_links.push(new Mixin.Subscriptions._SubscriptionLink(this, subscriber, notification_callback, options));
  };

  _Subscription.prototype.removeSubscriber = function(subscriber, notification_callback, subscription_name) {
    var subscription_link;
    subscription_link = _.find(this.subscription_links, function(test) {
      return (subscriber === test.subscriber) && (notification_callback === test.notification_callback);
    });
    if (!subscription_link) {
      throw new Error("Mixin.Subscriptions.removeSubscriber: subscription '" + subscription_name + "' does not exist for '" + (_.classOf(subscriber)) + "'");
    }
    _.remove(this.subscription_links, subscription_link);
    return subscription_link.destroy();
  };

  _Subscription.prototype.subscribers = function(subscribers) {
    var subscription_link, _i, _len, _ref;
    _ref = this.subscription_links;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      subscription_link = _ref[_i];
      subscribers.push(subscription_link.subscriber);
    }
  };

  _Subscription.prototype.notifySubscribers = function() {
    var args, subscription_link, _i, _len, _ref;
    args = Array.prototype.slice.call(arguments);
    _ref = this.subscription_links;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      subscription_link = _ref[_i];
      subscription_link.notification_callback.apply(subscription_link.subscriber, args);
    }
  };

  _Subscription.prototype.removeSubscribers = function(test_fn) {
    var removed_subscription_links, subscription_link, _i, _j, _len, _len1;
    if (test_fn) {
      removed_subscription_links = _.select(this.subscription_links, test_fn);
      if (removed_subscription_links.length === 0) {
        return;
      }
      this.subscription_links = _.difference(this.subscription_links, removed_subscription_links);
      for (_i = 0, _len = removed_subscription_links.length; _i < _len; _i++) {
        subscription_link = removed_subscription_links[_i];
        subscription_link.destroy();
      }
    } else {
      removed_subscription_links = this.subscription_links;
      this.subscription_links = [];
      for (_j = 0, _len1 = removed_subscription_links.length; _j < _len1; _j++) {
        subscription_link = removed_subscription_links[_j];
        subscription_link.destroy();
      }
    }
  };

  _Subscription.prototype.destroy = function() {
    var link, subscription_links, _i, _len;
    subscription_links = this.subscription_links;
    this.subscription_links = [];
    for (_i = 0, _len = subscription_links.length; _i < _len; _i++) {
      link = subscription_links[_i];
      link.destroy();
    }
  };

  return _Subscription;

})();

Mixin.Subscriptions.Observable || (Mixin.Subscriptions.Observable = {});

Mixin.Subscriptions.Observable._mixin_info = {
  mixin_name: 'Observable',
  initialize: function() {
    var arg, _i, _len;
    Mixin.instanceData(this, 'Observable', {
      subscriptions: {},
      is_destroyed: false
    });
    for (_i = 0, _len = arguments.length; _i < _len; _i++) {
      arg = arguments[_i];
      this.publishSubscription.apply(this, _.isArray(arg) ? arg : [arg]);
    }
  },
  destroy: function() {
    var instance_data, subscription, subscriptions, _i, _len;
    instance_data = Mixin.instanceData(this, 'Observable');
    if (instance_data.is_destroyed) {
      throw new Error("Mixin.Observable.destroy: already destroyed");
    }
    instance_data.is_destroyed = true;
    subscriptions = instance_data.subscriptions;
    instance_data.subscriptions = [];
    for (_i = 0, _len = subscriptions.length; _i < _len; _i++) {
      subscription = subscriptions[_i];
      subscription.destroy();
    }
  },
  mixin_object: {
    hasSubscription: function(subscription_name) {
      var instance_data;
      if (Mixin.DEBUG) {
        Mixin.Core._Validate.string(subscription_name, 'Mixin.Observable.hasSubscription', 'subscription_name');
      }
      instance_data = Mixin.instanceData(this, 'Observable');
      return instance_data.subscriptions.hasOwnProperty(subscription_name);
    },
    publishSubscription: function(subscription_name, subscription_type) {
      var instance_data;
      instance_data = Mixin.instanceData(this, 'Observable');
      if (subscription_type === void 0) {
        subscription_type = Mixin.Subscription.TYPE.MULTIPLE;
      }
      if (Mixin.DEBUG) {
        Mixin.Core._Validate.string(subscription_name, 'Mixin.Observable.publishSubscription', 'subscription_name');
        Mixin.Core._Validate.noKey(instance_data.subscriptions, subscription_name, 'Mixin.Observable.publishSubscription', 'subscription_name');
      }
      instance_data.subscriptions[subscription_name] = new Mixin.Subscriptions._Subscription(this, subscription_type);
      return this;
    },
    subscriptions: function() {
      var instance_data, key, subscriptions, value, _ref;
      instance_data = Mixin.instanceData(this, 'Observable');
      subscriptions = [];
      _ref = instance_data.subscriptions;
      for (key in _ref) {
        value = _ref[key];
        subscriptions.push(key);
      }
      return subscriptions;
    },
    subscribers: function(subscription_name) {
      var instance_data, key, subscribers, subscription, _ref, _ref1;
      subscribers = [];
      instance_data = Mixin.instanceData(this, 'Observable');
      if (subscription_name === void 0) {
        _ref = instance_data.subscriptions;
        for (key in _ref) {
          subscription = _ref[key];
          subscription.subscribers(subscribers);
        }
      } else {
        if (!instance_data.subscriptions.hasOwnProperty(subscription_name)) {
          throw new Error("Mixin.Observable.subscribers: subscriber '" + (_classOf(this)) + "' does not recognize '" + subscription_name + "'");
        }
        _ref1 = instance_data.subscriptions;
        for (key in _ref1) {
          subscription = _ref1[key];
          if (subscription.subscription_name === subscription_name) {
            subscription.subscribers(subscribers);
          }
        }
      }
      return _.uniq(subscribers);
    },
    addSubscriber: function(subscriber, subscription_parameters) {
      var args, check_arg, instance_data, parameter, _doSubscribe, _i, _len;
      instance_data = Mixin.instanceData(this, 'Observable');
      _doSubscribe = function(subscription_name, notification_callback, options) {
        var subscription;
        options || (options = {});
        if (Mixin.DEBUG) {
          Mixin.Core._Validate.string(subscription_name, 'Mixin.Observable.addSubscriber', 'subscription_name');
          Mixin.Core._Validate.callback(notification_callback, 'Mixin.Observable.addSubscriber', 'notification_callback');
          Mixin.Core._Validate.object(options, 'Mixin.Observable.addSubscriber', 'options');
          if (options.destroy !== void 0) {
            Mixin.Core._Validate.callback(options.destroy, 'Mixin.Observable.addSubscriber', 'options.destroy');
          }
        }
        Mixin.Core._Validate.hasKey(instance_data.subscriptions, subscription_name, 'Mixin.Observable.addSubscriber', 'subscription_name');
        subscription = instance_data.subscriptions[subscription_name];
        return subscription.addSubscriber(subscriber, notification_callback, options);
      };
      args = Array.prototype.slice.call(arguments, 1);
      Mixin.Core._Validate.instanceWithMixin(subscriber, 'Subscriber', 'Mixin.Observable.addSubscriber', 'subscriber');
      if (args.length > 1) {
        check_arg = args[1];
        if (!((_.isString(check_arg) && this.hasSubscription(check_arg)) || (_.isArray(check_arg) && (check_arg.length >= 1) && _.isString(check_arg[0]) && this.hasSubscription(check_arg[0])))) {
          _doSubscribe.apply(this, Array.prototype.slice.call(arguments, 1));
          return this;
        }
      }
      for (_i = 0, _len = args.length; _i < _len; _i++) {
        parameter = args[_i];
        if (_.isArray(parameter)) {
          _doSubscribe.apply(this, parameter);
        } else {
          _doSubscribe.apply(parameter);
        }
      }
      return this;
    },
    notifySubscribers: function(subscription_name) {
      var instance_data, subscription;
      instance_data = Mixin.instanceData(this, 'Observable');
      if (instance_data.is_destroyed) {
        return;
      }
      if (Mixin.DEBUG) {
        Mixin.Core._Validate.string(subscription_name, 'Mixin.Observable.notifySubscribers', 'subscription_name');
        Mixin.Core._Validate.hasKey(instance_data.subscriptions, subscription_name, 'Mixin.Observable.notifySubscribers');
      }
      subscription = instance_data.subscriptions[subscription_name];
      if (!subscription) {
        return;
      }
      subscription.notifySubscribers.apply(subscription, Array.prototype.slice.call(arguments, 1));
      return this;
    },
    removeSubscriber: function(subscriber, subscription_name, notification_callback) {
      var args, check_arg, instance_data, parameter, _doUnsubscribe, _i, _len;
      instance_data = Mixin.instanceData(this, 'Observable');
      _doUnsubscribe = function(subscription_name, notification_callback) {
        var subscription;
        if (Mixin.DEBUG) {
          Mixin.Core._Validate.string(subscription_name, 'Mixin.Observable.removeSubscriber', 'subscription_name');
          Mixin.Core._Validate.callback(notification_callback, 'Mixin.Observable.removeSubscriber', 'notification_callback');
        }
        Mixin.Core._Validate.hasKey(instance_data.subscriptions, subscription_name, 'Mixin.Observable.removeSubscriber', 'subscription_name');
        subscription = instance_data.subscriptions[subscription_name];
        return subscription.removeSubscriber(subscriber, notification_callback, subscription_name);
      };
      args = Array.prototype.slice.call(arguments, 1);
      if (Mixin.DEBUG) {
        Mixin.Core._Validate.instanceWithMixin(subscriber, 'Subscriber', 'Mixin.Observable.removeSubscriber', 'subscriber');
      }
      if (args.length > 1) {
        check_arg = args[1];
        if (!((_.isString(check_arg) && this.hasSubscription(check_arg)) || (_.isArray(check_arg) && (check_arg.length >= 1) && _.isString(check_arg[0]) && this.hasSubscription(check_arg[0])))) {
          _doUnsubscribe.apply(this, Array.prototype.slice.call(arguments, 1));
          return this;
        }
      }
      for (_i = 0, _len = args.length; _i < _len; _i++) {
        parameter = args[_i];
        if (_.isArray(parameter)) {
          _doUnsubscribe.apply(this, parameter);
        } else {
          _doUnsubscribe.apply(parameter);
        }
      }
      return this;
    },
    removeSubscribers: function(subscription_name, test_fn) {
      var instance_data, key, subscription, _ref;
      instance_data = Mixin.instanceData(this, 'Observable');
      if (Mixin.DEBUG) {
        if (subscription_name !== void 0) {
          Mixin.Core._Validate.string(subscription_name, 'Mixin.Observable.removeSubscribers', 'subscription_name');
          Mixin.Core._Validate.hasKey(instance_data.subscriptions, subscription_name, 'Mixin.Observable.removeSubscribers');
        }
        if (test_fn !== void 0) {
          Mixin.Core._Validate.callback(test_fn, 'Mixin.Observable.removeSubscribers', 'test_fn');
        }
      }
      if (subscription_name) {
        subscription = instance_data.subscriptions[subscription_name];
        if (!subscription) {
          return;
        }
        subscription.removeSubscribers(test_fn);
      } else {
        _ref = instance_data.subscriptions;
        for (key in _ref) {
          subscription = _ref[key];
          subscription.removeSubscribers(test_fn);
        }
      }
      return this;
    }
  }
};

Mixin.Subscriptions.Subscriber || (Mixin.Subscriptions.Subscriber = {});

Mixin.Subscriptions.Subscriber._mixin_info = {
  mixin_name: 'Subscriber',
  initialize: function() {
    return Mixin.instanceData(this, 'Subscriber', {
      subscription_backlinks: [],
      is_destroyed: false
    });
  },
  destroy: function() {
    var backlink, backlinks, instance_data, _i, _len;
    instance_data = Mixin.instanceData(this, 'Subscriber');
    if (instance_data.is_destroyed) {
      throw new Error("Mixin.Subscriber.destroy: already destroyed");
    }
    instance_data.is_destroyed = true;
    backlinks = instance_data.subscription_backlinks;
    instance_data.subscription_backlinks = [];
    for (_i = 0, _len = backlinks.length; _i < _len; _i++) {
      backlink = backlinks[_i];
      backlink.destroy();
    }
  },
  mixin_object: {
    observables: function(subscription_name) {
      var instance_data, obserables, subscription_link, _i, _j, _len, _len1, _ref, _ref1;
      instance_data = Mixin.instanceData(this, 'Subscriber');
      obserables = [];
      if (subscription_name === void 0) {
        _ref = instance_data.subscription_backlinks;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          subscription_link = _ref[_i];
          if (subscription_link.subscription && (subscription_link.subscription.subscription_name === subscription_name)) {
            obserables.push(subscription_link.subscription.observable);
          }
        }
      } else {
        if (Mixin.DEBUG) {
          Mixin.Core._Validate.string(subscription_name, 'Mixin.Subscriptions.observables', 'subscription_name');
        }
        _ref1 = instance_data.subscription_backlinks;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          subscription_link = _ref1[_j];
          if (subscription_link.subscription) {
            obserables.push(subscription_link.subscription.observable);
          }
        }
      }
      return _.uniq(obserables);
    }
  }
};

Mixin.Subscriptions.ObservableSubscriber || (Mixin.Subscriptions.ObservableSubscriber = {});

Mixin.Subscriptions.ObservableSubscriber._mixin_info = {
  mixin_name: 'ObservableSubscriber',
  mixin_object: {},
  initialize: function() {
    return Mixin["in"](this, 'Subscriber', ['Observable'].concat(Array.prototype.slice.call(arguments)));
  },
  destroy: function() {
    return Mixin.out(this, 'Subscriber', 'Observable');
  }
};

Mixin.registerMixin(Mixin.Subscriptions.Observable._mixin_info);

Mixin.registerMixin(Mixin.Subscriptions.Subscriber._mixin_info);

Mixin.registerMixin(Mixin.Subscriptions.ObservableSubscriber._mixin_info);
; return Mixin;});
}).call(this);